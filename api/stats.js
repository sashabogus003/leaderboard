let cache = {
  data: null,
  ts: null,
  expiry: 0
};

export default async function handler(req, res) {
  // üö´ –∑–∞–ø—Ä–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Vercel
  res.setHeader("Cache-Control", "no-store");

  const { startTime, endTime } = req.query;

  // ‚úÖ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à –∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω
  if (cache.data && Date.now() < cache.expiry) {
    return res.status(200).json({ data: cache.data, ts: cache.ts });
  }

  try {
    const url = `https://affiliate.shuffle.com/stats/${process.env.SHUFFLE_KEY}?startTime=${startTime}&endTime=${endTime}`;

    const response = await fetch(url);

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
    }

    const json = await response.json();

    // üóÉ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    cache.data = json;
    cache.ts = Date.now();
    cache.expiry = Date.now() + 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞

    return res.status(200).json({ data: cache.data, ts: cache.ts });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Shuffle:", err.message);

    // –µ—Å–ª–∏ –±—ã–ª –∫–µ—à, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (cache.data) {
      return res.status(200).json({ data: cache.data, ts: cache.ts });
    }

    // –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
    return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–µ—Ç –∫—ç—à–∞" });
  }
}
